const db = require('../models/index.model');
const Voucher = db.Voucher;
const Product = db.Product;
const VoucherProduct = db.VoucherProduct;
const { sequelize } = db;

//create voucher
exports.createVoucher = async (req, res) => {
  const t = await db.sequelize.transaction();
  try {
    let {
      name,
      code,
      description,
      discount_type,
      discount_value,
      min_order_value,
      user_limit,
      usage_limit,
      start_date,
      end_date,
      status,
      productIds, // m·∫£ng id s·∫£n ph·∫©m
    } = req.body;

    // Ki·ªÉm tra b·∫Øt bu·ªôc
    if (!name || !code || !description || !discount_type || !discount_value) {
      return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc." });
    }

    // Ki·ªÉm tra discount_type h·ª£p l·ªá
    if (!["percent", "fixed"].includes(discount_type)) {
      return res.status(400).json({ message: "Lo·∫°i gi·∫£m gi√° kh√¥ng h·ª£p l·ªá. Ch·ªâ nh·∫≠n 'percent' ho·∫∑c 'fixed'." });
    }

    // Ki·ªÉm tra code tr√πng
    const existing = await Voucher.findOne({ where: { code } });
    if (existing) {
      return res.status(400).json({ message: "M√£ voucher ƒë√£ t·ªìn t·∫°i, vui l√≤ng nh·∫≠p m√£ kh√°c." });
    }

    // Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c n·∫øu c√≥
    if (start_date && end_date && new Date(start_date) >= new Date(end_date)) {
      return res.status(400).json({ message: "Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu." });
    }

    // √âp ki·ªÉu s·ªë cho c√°c tr∆∞·ªùng c√≥ th·ªÉ nh·∫≠n null
    min_order_value = min_order_value ? parseFloat(min_order_value) : null;
    user_limit = user_limit ? parseInt(user_limit) : null;
    usage_limit = usage_limit ? parseInt(usage_limit) : null;
    status = status !== undefined ? parseInt(status) : 1;

    // T·∫°o voucher
    const newVoucher = await Voucher.create({
      name,
      code,
      description,
      discount_type,
      discount_value: parseFloat(discount_value),
      min_order_value,
      user_limit,
      usage_limit,
      start_date: start_date ? new Date(start_date) : null,
      end_date: end_date ? new Date(end_date) : null,
      status,
    }, { transaction: t });

    // Li√™n k·∫øt s·∫£n ph·∫©m n·∫øu c√≥
    if (Array.isArray(productIds) && productIds.length > 0) {
      const links = productIds.map(productId => ({
        id_voucher: newVoucher.id_voucher,
        id_product: productId,
      }));
      await VoucherProduct.bulkCreate(links, { transaction: t });
    }

    await t.commit();
    res.status(201).json({ message: "T·∫°o voucher th√†nh c√¥ng", voucher: newVoucher });
  } catch (error) {
    console.error("L·ªói khi t·∫°o voucher:", error);
    await t.rollback();
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi t·∫°o voucher." });
  }
};

//get list all 
exports.getAllVouchers = async (req, res) => {
  try {
    const vouchers = await Voucher.findAll({
      include: [
        {
          model: Product,
          as: 'products',
          attributes: ['id_products', 'products_name', 'products_sale_price'],
          through: { attributes: [] } // kh√¥ng l·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng trung gian
        }
      ],
      order: [['create_date', 'DESC']] // s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
    });

    res.status(200).json({ vouchers });
  } catch (error) {
    console.error('L·ªói l·∫•y danh s√°ch voucher:', error);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch voucher' });
  }
};

//get detail voucher
exports.getVoucherById = async (req, res) => {
  const id = req.params.id;

  try {
    const voucher = await Voucher.findByPk(id, {
      include: [
        {
          model: Product,
          as: 'products',
          attributes: ['id_products', 'products_name', 'products_sale_price'],
          through: { attributes: [] }, // ·∫©n b·∫£ng trung gian
        },
      ],
    });

    if (!voucher) {
      return res.status(404).json({ message: 'Voucher kh√¥ng t·ªìn t·∫°i' });
    }

    res.json(voucher);
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti·∫øt voucher:', error);
    res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y chi ti·∫øt voucher' });
  }
};

//update voucher
exports.updateVoucher = async (req, res) => {
  const id = req.params.id;

  try {
    const {
      name,
      code,
      description,
      discount_type,
      discount_value,
      min_order_value,
      user_limit,
      usage_limit,
      start_date,
      end_date,
      status,
      productIds, // üëâ danh s√°ch ID s·∫£n ph·∫©m √°p d·ª•ng
    } = req.body;

    const voucher = await Voucher.findByPk(id);
    if (!voucher) return res.status(404).json({ message: 'Voucher kh√¥ng t·ªìn t·∫°i' });

    // ‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu ch√≠nh
    await voucher.update({
      name,
      code,
      description,
      discount_type,
      discount_value,
      min_order_value,
      user_limit,
      usage_limit,
      start_date,
      end_date,
      status,
    });

    // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m √°p d·ª•ng
    if (Array.isArray(productIds)) {
      await voucher.setProducts(productIds);
    }

    return res.json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng', voucher });
  } catch (err) {
    console.error('‚ùå L·ªói update voucher:', err);
    return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t voucher' });
  }
};
